import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { Table, Card, Form, Button } from 'react-bootstrap';

const Dashboard = () => {
  const [users, setUsers] = useState([]);
  const [orders, setOrders] = useState([]);
  const [stats, setStats] = useState({
    totalCost: 0,
    totalOrders: 0,
  });

  const [pagination, setPagination] = useState({
    userPage: 1,
    orderPage: 1,
    userCount: 0,
    orderCount: 0,
    userPages: 1,
    orderPages: 1,
  });

  const [filters, setFilters] = useState({
    period: 'all',
    searchUser: '',
    searchOrder: '',
  });

  const deliveryMethods = {
    courier: '–ö—É—Ä—å–µ—Ä–æ–º',
    pickup: '–°–∞–º–æ–≤—ã–≤–æ–∑',
    post: '–ü–æ—á—Ç–∞',
  };

  const paymentMethods = {
    card: '–ö–∞—Ä—Ç–æ–π',
    cash: '–ù–∞–ª–∏—á–Ω—ã–º–∏',
    bank: '–ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥',
  };

  const orderStatuses = {
    pending: '–í –æ–∂–∏–¥–∞–Ω–∏–∏',
    confirmed: '–û–ø–ª–∞—á–µ–Ω',
    shipped: '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω',
    cancelled: '–û—Ç–º–µ–Ω—ë–Ω',
  };

  const token = localStorage.getItem('access'); // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  const fetchData = async () => {
    try {
      const params = new URLSearchParams({
        period: filters.period,
        search_user: filters.searchUser,
        search_order: filters.searchOrder,
        user_page: pagination.userPage,
        order_page: pagination.orderPage,
      });

      const response = await axios.get(`http://127.0.0.1:8000/api/dashboard/?${params}`);
      const data = response.data;

      setUsers(data.users || []);
      setOrders(data.orders || []);

      setPagination({
        ...pagination,
        userCount: data.user_pagination.count,
        orderCount: data.order_pagination.count,
        userPages: data.user_pagination.num_pages,
        orderPages: data.order_pagination.num_pages,
      });

      setStats({
        totalCost: data.total_cost || 0,
        totalOrders: data.total_orders || 0,
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–∏—Å–∫–∞
  const handleSearchUser = (e) => {
    setFilters({ ...filters, searchUser: e.target.value });
    setPagination({ ...pagination, userPage: 1 });
  };

  const handleSearchOrder = (e) => {
    setFilters({ ...filters, searchOrder: e.target.value });
    setPagination({ ...pagination, orderPage: 1 });
  };

  // –ü–∞–≥–∏–Ω–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const goToNextUserPage = () => {
    if (pagination.userPage < pagination.userPages) {
      setPagination({ ...pagination, userPage: pagination.userPage + 1 });
    }
  };

  const goToPrevUserPage = () => {
    if (pagination.userPage > 1) {
      setPagination({ ...pagination, userPage: pagination.userPage - 1 });
    }
  };

  // –ü–∞–≥–∏–Ω–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤
  const goToNextOrderPage = () => {
    if (pagination.orderPage < pagination.orderPages) {
      setPagination({ ...pagination, orderPage: pagination.orderPage + 1 });
    }
  };

  const goToPrevOrderPage = () => {
    if (pagination.orderPage > 1) {
      setPagination({ ...pagination, orderPage: pagination.orderPage - 1 });
    }
  };

  // –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const handleDeleteUser = async (userId) => {
    if (!window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?')) return;
    try {
      await axios.delete(`http://127.0.0.1:8000/api/users/${userId}/`, {
        headers: { Authorization: `Bearer ${token}` },
      });
      setUsers(users.filter(user => user.id !== userId));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }
  };

  // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
  const handleStatusChange = async (orderId, newStatus) => {
    try {
      await axios.patch(
        `http://127.0.0.1:8000/api/orders/${orderId}/`,
        { status: newStatus },
        {
          headers: { Authorization: `Bearer ${token}` },
        }
      );
      setOrders(orders.map(order =>
        order.id === orderId ? { ...order, status: newStatus } : order
      ));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å');
    }
  };

  // –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
  const handleDeleteOrder = async (orderId) => {
    if (!window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∑–∞–∫–∞–∑?')) return;
    try {
      await axios.delete(`http://127.0.0.1:8000/api/orders/${orderId}/`, {
        headers: { Authorization: `Bearer ${token}` },
      });
      setOrders(orders.filter(order => order.id !== orderId));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:', error);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑');
    }
  };

  // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    fetchData();
  }, [filters, pagination.userPage, pagination.orderPage]);

  return (
    <div className="container mt-4">
      <h2 className="mb-4">üìä –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</h2>

      {/* –§–∏–ª—å—Ç—Ä –ø–æ –≤—Ä–µ–º–µ–Ω–∏ */}
      <Form.Group className="mb-3 d-flex align-items-center">
        <Form.Label className="me-2 mb-0">–ü–µ—Ä–∏–æ–¥:</Form.Label>
        <Form.Select value={filters.period} onChange={(e) => setFilters({ ...filters, period: e.target.value })} style={{ width: 'auto' }}>
          <option value="all">–í—Å–µ –≤—Ä–µ–º—è</option>
          <option value="day">–°–µ–≥–æ–¥–Ω—è</option>
          <option value="week">–≠—Ç–∞ –Ω–µ–¥–µ–ª—è</option>
          <option value="month">–≠—Ç–æ—Ç –º–µ—Å—è—Ü</option>
        </Form.Select>
      </Form.Group>

      {/* –ü–æ–∏—Å–∫ */}
      <div className="row mb-3">
        <div className="col-md-6">
          <Form.Control
            type="text"
            placeholder="–ü–æ–∏—Å–∫ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (–Ω–∏–∫–Ω–µ–π–º –∏–ª–∏ email)"
            value={filters.searchUser}
            onChange={handleSearchUser}
          />
        </div>
        <div className="col-md-6">
          <Form.Control
            type="text"
            placeholder="–ü–æ–∏—Å–∫ –ø–æ –∑–∞–∫–∞–∑–∞–º (ID –∏–ª–∏ –∏–º—è)"
            value={filters.searchOrder}
            onChange={handleSearchOrder}
          />
        </div>
      </div>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div className="row g-3 mb-4">
        <div className="col-md-4">
          <Card bg="info" text="white">
            <Card.Body>
              <Card.Title>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</Card.Title>
              <Card.Text className="display-5">{users.length}</Card.Text>
            </Card.Body>
          </Card>
        </div>
        <div className="col-md-4">
          <Card bg="success" text="white">
            <Card.Body>
              <Card.Title>–ó–∞–∫–∞–∑—ã</Card.Title>
              <Card.Text className="display-5">{stats.totalOrders}</Card.Text>
            </Card.Body>
          </Card>
        </div>
        <div className="col-md-4">
          <Card bg="warning" text="dark">
            <Card.Body>
              <Card.Title>–û–±—â–∞—è —Å—É–º–º–∞</Card.Title>
              <Card.Text className="display-5">{stats.totalCost.toFixed(2)} ‚ÇΩ</Card.Text>
            </Card.Body>
          </Card>
        </div>
      </div>

      {/* –¢–∞–±–ª–∏—Ü—ã */}
      <div className="row">
        {/* –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ */}
        <div className="col-md-6">
          <h5>üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</h5>
          <Table striped bordered hover responsive>
            <thead className="table-light">
              <tr>
                <th>ID</th>
                <th>–ù–∏–∫–Ω–µ–π–º</th>
                <th>Email</th>
                <th>–ò–º—è</th>
                <th>–î–µ–π—Å—Ç–≤–∏—è</th>
              </tr>
            </thead>
            <tbody>
              {users.map(user => (
                <tr key={user.id}>
                  <td>{user.id}</td>
                  <td>{user.nickname}</td>
                  <td>{user.email}</td>
                  <td>{user.first_name} {user.last_name}</td>
                  <td>
                    <button
                      className="btn btn-danger btn-sm"
                      onClick={() => handleDeleteUser(user.id)}
                    >
                      –£–¥–∞–ª–∏—Ç—å
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </Table>
          {/* –ü–∞–≥–∏–Ω–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π */}
          <div className="d-flex justify-content-between">
            <Button variant="secondary" onClick={goToPrevUserPage} disabled={pagination.userPage === 1}>
              –ù–∞–∑–∞–¥
            </Button>
            <span>–°—Ç—Ä–∞–Ω–∏—Ü–∞ {pagination.userPage} –∏–∑ {pagination.userPages}</span>
            <Button variant="secondary" onClick={goToNextUserPage} disabled={pagination.userPage >= pagination.userPages}>
              –í–ø–µ—Ä—ë–¥
            </Button>
          </div>
        </div>

        {/* –ó–∞–∫–∞–∑—ã */}
        <div className="col-md-6">
          <h5>üõçÔ∏è –ó–∞–∫–∞–∑—ã</h5>
          <Table striped bordered hover responsive>
            <thead className="table-light">
              <tr>
                <th>ID</th>
                <th>–ö–ª–∏–µ–Ω—Ç</th>
                <th>–¶–µ–Ω–∞</th>
                <th>–î–∞—Ç–∞</th>
                <th>–°—Ç–∞—Ç—É—Å</th>
                <th>–î–µ–π—Å—Ç–≤–∏—è</th>
              </tr>
            </thead>
            <tbody>
              {orders.map(order => (
                <tr key={order.id}>
                  <td>{order.id}</td>
                  <td>{order.full_name}</td>
                  <td>{parseFloat(order.total_price).toFixed(2)} ‚ÇΩ</td>
                  <td>{new Date(order.created_at).toLocaleDateString()}</td>
                  <td>
                    <Form.Select
                      value={order.status}
                      onChange={(e) => handleStatusChange(order.id, e.target.value)}
                      style={{ width: '150px' }}
                    >
                      {Object.entries(orderStatuses).map(([key, label]) => (
                        <option key={key} value={key}>
                          {label}
                        </option>
                      ))}
                    </Form.Select>
                  </td>
                  <td>
                    <button
                      className="btn btn-danger btn-sm"
                      onClick={() => handleDeleteOrder(order.id)}
                    >
                      –£–¥–∞–ª–∏—Ç—å
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </Table>
          {/* –ü–∞–≥–∏–Ω–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤ */}
          <div className="d-flex justify-content-between">
            <Button variant="secondary" onClick={goToPrevOrderPage} disabled={pagination.orderPage === 1}>
              –ù–∞–∑–∞–¥
            </Button>
            <span>–°—Ç—Ä–∞–Ω–∏—Ü–∞ {pagination.orderPage} –∏–∑ {pagination.orderPages}</span>
            <Button variant="secondary" onClick={goToNextOrderPage} disabled={pagination.orderPage >= pagination.orderPages}>
              –í–ø–µ—Ä—ë–¥
            </Button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Dashboard;